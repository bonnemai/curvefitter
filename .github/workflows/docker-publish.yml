name: Publish Docker Image

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: prd
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID || vars.AWS_ACCOUNT_ID }}
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN || vars.AWS_ROLE_ARN }}
      AWS_REGION: ${{ secrets.AWS_REGION || vars.AWS_REGION }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY || secrets.ECR_REPOSITORY }}
      ECR_REGISTRY: ${{ vars.ECR_REGISTRY || secrets.ECR_REGISTRY || format('{0}.dkr.ecr.{1}.amazonaws.com', secrets.AWS_ACCOUNT_ID || vars.AWS_ACCOUNT_ID, secrets.AWS_REGION || vars.AWS_REGION) }}
      BUILD_PLATFORMS: ${{ vars.BUILD_PLATFORMS || 'linux/arm64' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate AWS configuration
        run: |
          missing=""
          for var in AWS_ACCOUNT_ID AWS_REGION AWS_ROLE_ARN ECR_REPOSITORY; do
            if [ -z "${!var}" ]; then
              missing="$missing $var"
            fi
          done
          if [ -n "$missing" ]; then
            echo "::error::Missing required AWS/ECR configuration:$missing"
            echo "Ensure these are set via repository/environment vars or secrets."
            exit 1
          fi

          repo="$ECR_REPOSITORY"
          repo=${repo#https://}
          repo=${repo#http://}
          if [[ "$repo" == *".amazonaws.com/"* ]]; then
            registry_part="${repo%%/*}"
            repo="${repo#*/}"
            echo "Detected full ECR image value; using registry '$registry_part' and repository '$repo'."
            ECR_REGISTRY="$registry_part"
            echo "ECR_REGISTRY=$ECR_REGISTRY" >> "$GITHUB_ENV"
          fi

          if [ -z "$repo" ]; then
            echo "::error::Resolved ECR repository name is empty."
            exit 1
          fi

          if [ -z "$ECR_REGISTRY" ]; then
            ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          fi

          if [ -z "$ECR_REGISTRY" ]; then
            echo "::error::ECR registry could not be determined. Set ECR_REGISTRY explicitly."
            exit 1
          fi

          echo "ECR_REGISTRY=$ECR_REGISTRY" >> "$GITHUB_ENV"
          echo "SANITIZED_ECR_REPOSITORY=$repo" >> "$GITHUB_ENV"
          echo "ECR_IMAGE=$ECR_REGISTRY/$repo" >> "$GITHUB_ENV"

      - name: Configure AWS credentials (OIDC)
        if: env.AWS_ROLE_ARN != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "$SANITIZED_ECR_REPOSITORY" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$SANITIZED_ECR_REPOSITORY" >/dev/null

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.ECR_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: ${{ env.BUILD_PLATFORMS }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          sbom: false
          build-args: |
            BUILD_TIME=${{ github.event.head_commit.timestamp }}

      - name: Update Lambda function
        run: |
          aws lambda update-function-code \
            --function-name lambda-curve-fitter-function \
            --image-uri ${{ env.ECR_IMAGE }}:latest
  sonarqube:
    name: SonarQube
    environment: prd
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Build tests image
        run: docker build --target tests -t curve-fitter-tests .
      - name: Export coverage report from tests image
        run: |
          container_id=$(docker create curve-fitter-tests)
          docker cp "$container_id":/app/coverage.xml coverage.xml
          docker rm "$container_id"
          test -f coverage.xml
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
